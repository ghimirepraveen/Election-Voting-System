// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Define the User model
model User {
  user_id           Int                 @id @default(autoincrement())
  email             String              @unique
  password_hash     String?
  passwors_expires  DateTime?
  role              Role?
  voter             Voter[]
  candidate         Candidate[]
  photo             Photo[]
 election          Election[]
  electionCandidacy ElectionCandidacy[]
  electionVotes     ElectionVote[]
}

// Define the Role enum
enum Role {
  VOTER
  CANDIDATE
}

// Define the Voter model
model Voter {
  voter_id       Int            @id @default(autoincrement())
  user           User           @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  user_id        Int            @unique
  name           String
  address        String
  citizen_number String         @unique
  is_verified    Boolean        @default(false)
  votes          Vote[]
  photo          Photo[]
  election       Election[]
  electionVotes  ElectionVote[]
}

// Define the Candidate model
model Candidate {
  candidate_id      Int                 @id @default(autoincrement())
  user              User                @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  user_id           Int                 @unique
  name              String
  address           String
  position          String
  citizen_number    String              @unique
  manifesto         String
  is_verified       Boolean             @default(false)
  citizenship_photo String?
  vote_count        Int                 @default(0) // Field to store the count of votes
  votes             Vote[]
  photo             Photo[]
  electionCandidacy ElectionCandidacy[]
  electionVotes     ElectionVote[]
  election          Election[]
}

// Define the Vote model
model Vote {
  vote_id      Int       @id @default(autoincrement())
  voter        Voter     @relation(fields: [voter_id], references: [voter_id], onDelete: Cascade)
  voter_id     Int       @unique
  candidate    Candidate @relation(fields: [candidate_id], references: [candidate_id], onDelete: Cascade)
  candidate_id Int
  election     Election  @relation(fields: [election_id], references: [election_id], onDelete: Cascade)
  election_id  Int       @unique
  vote_count   Int       @default(0)
}

// Define the Admin model


model Election {
  election_id       Int                 @id @default(autoincrement())
  user              User                @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  user_id           Int                

  name              String
  description       String
  start_date        DateTime
  end_date          DateTime
  candidacyends     DateTime
  candidates        Candidate[]
  voters            Voter[]
  electionCandidacy ElectionCandidacy[]
  electionVotes     ElectionVote[]
  vote              Vote[]
}

model ElectionVote {
  user            User      @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  user_id         Int       @unique
  electionVote_id Int       @id @default(autoincrement())
  election        Election  @relation(fields: [election_id], references: [election_id], onDelete: Cascade)
  election_id     Int       @unique
  voter           Voter     @relation(fields: [voter_id], references: [voter_id], onDelete: Cascade)
  voter_id        Int
  candidate       Candidate @relation(fields: [candidate_id], references: [candidate_id], onDelete: Cascade)
  candidate_id    Int
}

model ElectionCandidacy {
  electionCandidacy_id Int       @id @default(autoincrement())
  election             Election  @relation(fields: [election_id], references: [election_id], onDelete: Cascade)
  election_id          Int
  user                 User      @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  user_id              Int       @unique
  candidate            Candidate @relation(fields: [candidate_id], references: [candidate_id], onDelete: Cascade)
  candidate_id         Int
}

model Photo {
  user         User?      @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  user_id      Int?
  photo_id     Int        @id @default(autoincrement())
  url          String?
  voter        Voter?     @relation(fields: [voter_id], references: [voter_id], onDelete: Cascade)
  voter_id     Int?
  candidate    Candidate? @relation(fields: [candidate_id], references: [candidate_id], onDelete: Cascade)
  candidate_id Int?
  isactive     Boolean?   @default(true)
}
