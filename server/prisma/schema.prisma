// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// Define the User model
model User {
  user_id          Int       @id @default(autoincrement())
  email            String    @unique
  password_hash    String?
  passwors_expires DateTime?
  role             Role?
  voter            Voter[]

  candidate Candidate[]
  photo    Photo[]
  admin Admin[]
}

// Define the Role enum
enum Role {
  VOTER
  CANDIDATE
  ADMIN
}

// Define the Voter model
model Voter {
  voter_id          Int     @id @default(autoincrement())
  user              User    @relation(fields: [user_id], references: [user_id])
  user_id           Int     @unique
  name              String
  address           String
  citizen_number    String
  is_verified       Boolean @default(false)
  votes             Vote[]
  photo             Photo[]
}

// Define the Candidate model
model Candidate {
  candidate_id      Int     @id @default(autoincrement())
  user              User    @relation(fields: [user_id], references: [user_id])
  user_id           Int     @unique
  position          String
  citizen_number    String
  is_verified       Boolean
  citizenship_photo String?
  vote_count        Int     @default(0) // Field to store the count of votes
  votes             Vote[]
  photo             Photo[]
}

// Define the Vote model
model Vote {
  vote_id      Int       @id @default(autoincrement())
  voter        Voter     @relation(fields: [voter_id], references: [voter_id])
  voter_id     Int       @unique
  candidate    Candidate @relation(fields: [candidate_id], references: [candidate_id])
  candidate_id Int
}

// Define the Admin model
model Admin {
  admin_id Int  @id @default(autoincrement())
  user     User @relation(fields: [user_id], references: [user_id])
  user_id  Int  @unique
}

model Photo {
  user User? @relation(fields: [user_id], references: [user_id])
  user_id Int?
  photo_id     Int       @id @default(autoincrement())
  url          String?
  voter        Voter?    @relation(fields: [voter_id], references: [voter_id])
  voter_id     Int?
  candidate    Candidate? @relation(fields: [candidate_id], references: [candidate_id])
  candidate_id Int?
  isactive    Boolean?   @default(true)

}

